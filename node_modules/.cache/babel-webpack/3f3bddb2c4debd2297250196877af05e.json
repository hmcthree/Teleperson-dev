{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Input, HostBinding, HostListener, Component, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass PlaidLinkHandler {\n  /**\n   * Constructor configures the Plaid Link handler with given config options.\n   * @param PlaidConfig config\n   */\n  constructor(config) {\n    this.plaidLink = Plaid.create(config);\n  }\n  /**\n   * Open the Plaid Link window for this handler.\n   * @param string institution The name of the institution to open\n   */\n\n\n  open(institution) {\n    this.plaidLink.open(institution);\n  }\n  /**\n   * Closes the currently open Plaid Link window if any.\n   */\n\n\n  exit() {\n    this.plaidLink.exit();\n  }\n\n}\n\nclass NgxPlaidLinkService {\n  constructor() {}\n  /**\n   * Create a Plaid Link instance as soon as Plaid Link has loaded.\n   * @param PlaidConfig config\n   * @returns Promise<PlaidLinkHandler>\n   */\n\n\n  createPlaid(config) {\n    return this.loadPlaid().then(() => {\n      return new PlaidLinkHandler(config);\n    });\n  }\n  /**\n   * Load or wait for the Plaid Link library to load.\n   * @returns Promise<void>\n   */\n\n\n  loadPlaid() {\n    if (!this.loaded) {\n      this.loaded = new Promise((resolve, reject) => {\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = 'https://cdn.plaid.com/link/v2/stable/link-initialize.js';\n\n        script.onerror = e => reject(e);\n\n        if (script.readyState) {\n          script.onreadystatechange = () => {\n            if (script.readyState === 'loaded' || script.readyState === 'complete') {\n              script.onreadystatechange = null;\n              resolve();\n            }\n          };\n        } else {\n          script.onload = () => {\n            resolve();\n          };\n        }\n\n        document.getElementsByTagName('body')[0].appendChild(script);\n      });\n    }\n\n    return this.loaded;\n  }\n\n}\n\nNgxPlaidLinkService.ɵfac = function NgxPlaidLinkService_Factory(t) {\n  return new (t || NgxPlaidLinkService)();\n};\n\nNgxPlaidLinkService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxPlaidLinkService,\n  factory: NgxPlaidLinkService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPlaidLinkService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction getWindow$1() {\n  return window;\n}\n\nclass NgxPlaidLinkDirective {\n  constructor(plaidLinkLoader) {\n    this.plaidLinkLoader = plaidLinkLoader;\n    this.Event = new EventEmitter();\n    this.Click = new EventEmitter();\n    this.Load = new EventEmitter();\n    this.Exit = new EventEmitter();\n    this.Success = new EventEmitter();\n    this.defaultProps = {\n      apiVersion: \"v2\",\n      env: \"sandbox\",\n      institution: null,\n      selectAccount: false,\n      publicKey: null,\n      token: null,\n      webhook: \"\",\n      product: [\"auth\"],\n      countryCodes: [\"US\"],\n      receivedRedirectUri: null,\n      isWebview: false\n    };\n    this.publicKey = this.defaultProps.publicKey;\n    this.apiVersion = this.defaultProps.apiVersion;\n    this.env = this.defaultProps.env;\n    this.institution = this.defaultProps.institution;\n    this.product = this.defaultProps.product;\n    this.selectAccount = this.defaultProps.selectAccount;\n    this.token = this.defaultProps.token;\n    this.webhook = this.defaultProps.webhook;\n    this.countryCodes = this.defaultProps.countryCodes;\n    this.receivedRedirectUri = this.defaultProps.receivedRedirectUri;\n    this.isWebview = this.defaultProps.isWebview;\n    this.disabledButton = true;\n  }\n\n  ngOnInit() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let handler = yield this.plaidLinkLoader.createPlaid({\n        env: this.env,\n        key: this.publicKey,\n        product: this.product,\n        apiVersion: \"v2\",\n        clientName: this.clientName,\n        countryCodes: this.countryCodes,\n        onSuccess: (public_token, metadata) => this.onSuccess(public_token, metadata),\n        onExit: (err, metadata) => this.onExit(err, metadata),\n        onEvent: (eventName, metadata) => this.onEvent(eventName, metadata),\n        onLoad: () => this.onLoad(),\n        selectAccount: this.selectAccount,\n        token: this.token || null,\n        webhook: this.webhook || null,\n        receivedRedirectUri: this.receivedRedirectUri,\n        isWebview: this.isWebview\n      });\n      this.disabledButton = false;\n      this.plaidLinkHandler = handler;\n    });\n  }\n\n  onExit(error, metadata) {\n    this.Exit.emit({\n      error,\n      metadata\n    });\n  }\n\n  onEvent(eventName, metadata) {\n    this.Event.emit({\n      eventName,\n      metadata\n    });\n  }\n\n  onSuccess(token, metadata) {\n    this.Success.emit({\n      token,\n      metadata\n    });\n  }\n\n  onClick($event) {\n    this.Click.emit($event); // Open to a specific institution if necessary;\n\n    const institution = this.institution || null;\n\n    if (this.plaidLinkHandler) {\n      this.plaidLinkHandler.open(institution);\n    }\n  }\n\n  onLoad($event = \"link_loaded\") {\n    this.Load.emit($event);\n  }\n\n}\n\nNgxPlaidLinkDirective.ɵfac = function NgxPlaidLinkDirective_Factory(t) {\n  return new (t || NgxPlaidLinkDirective)(i0.ɵɵdirectiveInject(NgxPlaidLinkService));\n};\n\nNgxPlaidLinkDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxPlaidLinkDirective,\n  selectors: [[\"\", \"ngxPlaidLink\", \"\"]],\n  hostVars: 1,\n  hostBindings: function NgxPlaidLinkDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function NgxPlaidLinkDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"disabled\", ctx.disabledButton);\n    }\n  },\n  inputs: {\n    clientName: \"clientName\",\n    publicKey: \"publicKey\",\n    apiVersion: \"apiVersion\",\n    env: \"env\",\n    institution: \"institution\",\n    product: \"product\",\n    selectAccount: \"selectAccount\",\n    token: \"token\",\n    webhook: \"webhook\",\n    countryCodes: \"countryCodes\",\n    receivedRedirectUri: \"receivedRedirectUri\",\n    isWebview: \"isWebview\"\n  },\n  outputs: {\n    Event: \"Event\",\n    Click: \"Click\",\n    Load: \"Load\",\n    Exit: \"Exit\",\n    Success: \"Success\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPlaidLinkDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxPlaidLink]'\n    }]\n  }], function () {\n    return [{\n      type: NgxPlaidLinkService\n    }];\n  }, {\n    Event: [{\n      type: Output\n    }],\n    Click: [{\n      type: Output\n    }],\n    Load: [{\n      type: Output\n    }],\n    Exit: [{\n      type: Output\n    }],\n    Success: [{\n      type: Output\n    }],\n    clientName: [{\n      type: Input\n    }],\n    disabledButton: [{\n      type: HostBinding,\n      args: ['disabled']\n    }],\n    publicKey: [{\n      type: Input\n    }],\n    apiVersion: [{\n      type: Input\n    }],\n    env: [{\n      type: Input\n    }],\n    institution: [{\n      type: Input\n    }],\n    product: [{\n      type: Input\n    }],\n    selectAccount: [{\n      type: Input\n    }],\n    token: [{\n      type: Input\n    }],\n    webhook: [{\n      type: Input\n    }],\n    countryCodes: [{\n      type: Input\n    }],\n    receivedRedirectUri: [{\n      type: Input\n    }],\n    isWebview: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n\nfunction getWindow() {\n  return window;\n}\n\nclass NgxPlaidLinkButtonComponent {\n  constructor() {\n    this.Event = new EventEmitter();\n    this.Success = new EventEmitter();\n    this.Click = new EventEmitter();\n    this.Load = new EventEmitter();\n    this.Exit = new EventEmitter();\n    this.defaultProps = {\n      apiVersion: \"v2\",\n      env: \"sandbox\",\n      institution: null,\n      selectAccount: false,\n      token: null,\n      publicKey: null,\n      webhook: \"\",\n      product: [\"auth\"],\n      countryCodes: [\"US\"],\n      style: {\n        \"background-color\": \"#0085e4\",\n        \"transition-duration\": \"350ms\",\n        \"transition-property\": \"background-color, box-shadow\",\n        \"transition-timing-function\": \"ease-in-out\",\n        \"-webkit-appearance\": \"button\",\n        border: \"0\",\n        \"border-radius\": \"4px\",\n        \"box-shadow\": \"0 2px 4px 0 rgba(0,0,0,0.1), inset 0 1px 0 0 rgba(255,255,255,0.1)\",\n        color: \"#fff\",\n        \"font-size\": \"20px\",\n        height: \"56px\",\n        outline: \"0\",\n        \"text-align\": \"center\",\n        \"text-transform\": \"none\",\n        padding: \"0 2em\",\n        cursor: \"pointer\"\n      },\n      buttonText: \"Log In To Your Bank Account\",\n      className: \"plaid-link-button\",\n      receivedRedirectUri: null,\n      isWebview: false\n    };\n    this.publicKey = this.defaultProps.publicKey;\n    this.apiVersion = this.defaultProps.apiVersion;\n    this.env = this.defaultProps.env;\n    this.institution = this.defaultProps.institution;\n    this.product = this.defaultProps.product;\n    this.selectAccount = this.defaultProps.selectAccount;\n    this.token = this.defaultProps.token;\n    this.webhook = this.defaultProps.webhook;\n    this.countryCodes = this.defaultProps.countryCodes;\n    this.style = this.defaultProps.style;\n    this.buttonText = this.defaultProps.buttonText;\n    this.className = this.defaultProps.className;\n    this.receivedRedirectUri = this.defaultProps.receivedRedirectUri;\n    this.isWebview = this.defaultProps.isWebview;\n  }\n\n  get nativeWindow() {\n    return getWindow();\n  }\n\n  onScriptError() {\n    console.error(\"There was an issue loading the link-initialize.js script\");\n  }\n\n  onDirectiveSuccess(event) {\n    this.Success.emit(event);\n  }\n\n  onDirectiveExit(event) {\n    this.Exit.emit(event);\n  }\n\n  onDirectiveLoad(event) {\n    this.Load.emit(event);\n  }\n\n  onDirectiveEvent(event) {\n    this.Event.emit(event);\n  }\n\n  onDirectiveClick(event) {\n    this.Click.emit(event);\n  }\n\n}\n\nNgxPlaidLinkButtonComponent.ɵfac = function NgxPlaidLinkButtonComponent_Factory(t) {\n  return new (t || NgxPlaidLinkButtonComponent)();\n};\n\nNgxPlaidLinkButtonComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxPlaidLinkButtonComponent,\n  selectors: [[\"mr-ngx-plaid-link-button\"]],\n  inputs: {\n    clientName: \"clientName\",\n    publicKey: \"publicKey\",\n    apiVersion: \"apiVersion\",\n    env: \"env\",\n    institution: \"institution\",\n    product: \"product\",\n    selectAccount: \"selectAccount\",\n    token: \"token\",\n    webhook: \"webhook\",\n    countryCodes: \"countryCodes\",\n    style: \"style\",\n    buttonText: \"buttonText\",\n    className: \"className\",\n    receivedRedirectUri: \"receivedRedirectUri\",\n    isWebview: \"isWebview\"\n  },\n  outputs: {\n    Event: \"Event\",\n    Success: \"Success\",\n    Click: \"Click\",\n    Load: \"Load\",\n    Exit: \"Exit\"\n  },\n  decls: 2,\n  vars: 15,\n  consts: [[\"ngxPlaidLink\", \"\", 3, \"ngStyle\", \"publicKey\", \"clientName\", \"apiVersion\", \"env\", \"institution\", \"product\", \"selectAccount\", \"token\", \"webhook\", \"receivedRedirectUri\", \"countryCodes\", \"Success\", \"Exit\", \"Load\", \"Event\", \"Click\"]],\n  template: function NgxPlaidLinkButtonComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"Success\", function NgxPlaidLinkButtonComponent_Template_button_Success_0_listener($event) {\n        return ctx.onDirectiveSuccess($event);\n      })(\"Exit\", function NgxPlaidLinkButtonComponent_Template_button_Exit_0_listener($event) {\n        return ctx.onDirectiveExit($event);\n      })(\"Load\", function NgxPlaidLinkButtonComponent_Template_button_Load_0_listener($event) {\n        return ctx.onDirectiveLoad($event);\n      })(\"Event\", function NgxPlaidLinkButtonComponent_Template_button_Event_0_listener($event) {\n        return ctx.onDirectiveEvent($event);\n      })(\"Click\", function NgxPlaidLinkButtonComponent_Template_button_Click_0_listener($event) {\n        return ctx.onDirectiveClick($event);\n      });\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.className);\n      i0.ɵɵproperty(\"ngStyle\", ctx.style)(\"publicKey\", ctx.publicKey)(\"clientName\", ctx.clientName)(\"apiVersion\", ctx.apiVersion)(\"env\", ctx.env)(\"institution\", ctx.institution)(\"product\", ctx.product)(\"selectAccount\", ctx.selectAccount)(\"token\", ctx.token)(\"webhook\", ctx.webhook)(\"receivedRedirectUri\", ctx.receivedRedirectUri)(\"countryCodes\", ctx.countryCodes);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.buttonText, \" \");\n    }\n  },\n  directives: [NgxPlaidLinkDirective, i2.NgStyle],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPlaidLinkButtonComponent, [{\n    type: Component,\n    args: [{\n      selector: \"mr-ngx-plaid-link-button\",\n      template: `\n    <button ngxPlaidLink\n            [class]=\"className\"\n            [ngStyle]=\"style\"\n            [publicKey]=\"publicKey\"\n            [clientName]=\"clientName\"\n            [apiVersion]=\"apiVersion\"\n            [env]=\"env\"\n            [institution]=\"institution\"\n            [product]=\"product\"\n            [selectAccount]=\"selectAccount\"\n            [token]=\"token\"\n            [webhook]=\"webhook\"\n            [receivedRedirectUri]=\"receivedRedirectUri\"\n            [countryCodes]=\"countryCodes\"\n            (Success)=\"onDirectiveSuccess($event)\"\n            (Exit)=\"onDirectiveExit($event)\"\n            (Load)=\"onDirectiveLoad($event)\"\n            (Event)=\"onDirectiveEvent($event)\"\n            (Click)=\"onDirectiveClick($event)\"\n    >\n      {{ buttonText }}\n    </button>\n  `,\n      styles: []\n    }]\n  }], function () {\n    return [];\n  }, {\n    clientName: [{\n      type: Input\n    }],\n    Event: [{\n      type: Output\n    }],\n    Success: [{\n      type: Output\n    }],\n    Click: [{\n      type: Output\n    }],\n    Load: [{\n      type: Output\n    }],\n    Exit: [{\n      type: Output\n    }],\n    publicKey: [{\n      type: Input\n    }],\n    apiVersion: [{\n      type: Input\n    }],\n    env: [{\n      type: Input\n    }],\n    institution: [{\n      type: Input\n    }],\n    product: [{\n      type: Input\n    }],\n    selectAccount: [{\n      type: Input\n    }],\n    token: [{\n      type: Input\n    }],\n    webhook: [{\n      type: Input\n    }],\n    countryCodes: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    buttonText: [{\n      type: Input\n    }],\n    className: [{\n      type: Input\n    }],\n    receivedRedirectUri: [{\n      type: Input\n    }],\n    isWebview: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NgxPlaidLinkModule {}\n\nNgxPlaidLinkModule.ɵfac = function NgxPlaidLinkModule_Factory(t) {\n  return new (t || NgxPlaidLinkModule)();\n};\n\nNgxPlaidLinkModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxPlaidLinkModule\n});\nNgxPlaidLinkModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [NgxPlaidLinkService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPlaidLinkModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      providers: [NgxPlaidLinkService],\n      declarations: [NgxPlaidLinkButtonComponent, NgxPlaidLinkDirective],\n      exports: [NgxPlaidLinkButtonComponent, NgxPlaidLinkDirective]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ngx-plaid-link\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NgxPlaidLinkButtonComponent, NgxPlaidLinkDirective, NgxPlaidLinkModule, NgxPlaidLinkService, PlaidLinkHandler };","map":{"version":3,"sources":["/Users/ashu/Downloads/teleperson-productioncode/node_modules/ngx-plaid-link/fesm2015/ngx-plaid-link.mjs"],"names":["i0","Injectable","EventEmitter","Directive","Output","Input","HostBinding","HostListener","Component","NgModule","__awaiter","i2","CommonModule","PlaidLinkHandler","constructor","config","plaidLink","Plaid","create","open","institution","exit","NgxPlaidLinkService","createPlaid","loadPlaid","then","loaded","Promise","resolve","reject","script","document","createElement","type","src","onerror","e","readyState","onreadystatechange","onload","getElementsByTagName","appendChild","ɵfac","ɵprov","getWindow$1","window","NgxPlaidLinkDirective","plaidLinkLoader","Event","Click","Load","Exit","Success","defaultProps","apiVersion","env","selectAccount","publicKey","token","webhook","product","countryCodes","receivedRedirectUri","isWebview","disabledButton","ngOnInit","handler","key","clientName","onSuccess","public_token","metadata","onExit","err","onEvent","eventName","onLoad","plaidLinkHandler","error","emit","onClick","$event","ɵdir","args","selector","getWindow","NgxPlaidLinkButtonComponent","style","border","color","height","outline","padding","cursor","buttonText","className","nativeWindow","onScriptError","console","onDirectiveSuccess","event","onDirectiveExit","onDirectiveLoad","onDirectiveEvent","onDirectiveClick","ɵcmp","NgStyle","template","styles","NgxPlaidLinkModule","ɵmod","ɵinj","imports","providers","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Input, HostBinding, HostListener, Component, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass PlaidLinkHandler {\n    /**\n     * Constructor configures the Plaid Link handler with given config options.\n     * @param PlaidConfig config\n     */\n    constructor(config) {\n        this.plaidLink = Plaid.create(config);\n    }\n    /**\n     * Open the Plaid Link window for this handler.\n     * @param string institution The name of the institution to open\n     */\n    open(institution) {\n        this.plaidLink.open(institution);\n    }\n    /**\n     * Closes the currently open Plaid Link window if any.\n     */\n    exit() {\n        this.plaidLink.exit();\n    }\n}\n\nclass NgxPlaidLinkService {\n    constructor() { }\n    /**\n     * Create a Plaid Link instance as soon as Plaid Link has loaded.\n     * @param PlaidConfig config\n     * @returns Promise<PlaidLinkHandler>\n     */\n    createPlaid(config) {\n        return this.loadPlaid().then(() => {\n            return new PlaidLinkHandler(config);\n        });\n    }\n    /**\n     * Load or wait for the Plaid Link library to load.\n     * @returns Promise<void>\n     */\n    loadPlaid() {\n        if (!this.loaded) {\n            this.loaded = new Promise((resolve, reject) => {\n                const script = document.createElement('script');\n                script.type = 'text/javascript';\n                script.src = 'https://cdn.plaid.com/link/v2/stable/link-initialize.js';\n                script.onerror = (e) => reject(e);\n                if (script.readyState) {\n                    script.onreadystatechange = () => {\n                        if (script.readyState === 'loaded' || script.readyState === 'complete') {\n                            script.onreadystatechange = null;\n                            resolve();\n                        }\n                    };\n                }\n                else {\n                    script.onload = () => {\n                        resolve();\n                    };\n                }\n                document.getElementsByTagName('body')[0].appendChild(script);\n            });\n        }\n        return this.loaded;\n    }\n}\nNgxPlaidLinkService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NgxPlaidLinkService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNgxPlaidLinkService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NgxPlaidLinkService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NgxPlaidLinkService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\nfunction getWindow$1() {\n    return window;\n}\nclass NgxPlaidLinkDirective {\n    constructor(plaidLinkLoader) {\n        this.plaidLinkLoader = plaidLinkLoader;\n        this.Event = new EventEmitter();\n        this.Click = new EventEmitter();\n        this.Load = new EventEmitter();\n        this.Exit = new EventEmitter();\n        this.Success = new EventEmitter();\n        this.defaultProps = {\n            apiVersion: \"v2\",\n            env: \"sandbox\",\n            institution: null,\n            selectAccount: false,\n            publicKey: null,\n            token: null,\n            webhook: \"\",\n            product: [\"auth\"],\n            countryCodes: [\"US\"],\n            receivedRedirectUri: null,\n            isWebview: false,\n        };\n        this.publicKey = this.defaultProps.publicKey;\n        this.apiVersion = this.defaultProps.apiVersion;\n        this.env = this.defaultProps.env;\n        this.institution = this.defaultProps.institution;\n        this.product = this.defaultProps.product;\n        this.selectAccount = this.defaultProps.selectAccount;\n        this.token = this.defaultProps.token;\n        this.webhook = this.defaultProps.webhook;\n        this.countryCodes = this.defaultProps.countryCodes;\n        this.receivedRedirectUri = this.defaultProps.receivedRedirectUri;\n        this.isWebview = this.defaultProps.isWebview;\n        this.disabledButton = true;\n    }\n    ngOnInit() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let handler = yield this.plaidLinkLoader\n                .createPlaid({\n                env: this.env,\n                key: this.publicKey,\n                product: this.product,\n                apiVersion: \"v2\",\n                clientName: this.clientName,\n                countryCodes: this.countryCodes,\n                onSuccess: (public_token, metadata) => this.onSuccess(public_token, metadata),\n                onExit: (err, metadata) => this.onExit(err, metadata),\n                onEvent: (eventName, metadata) => this.onEvent(eventName, metadata),\n                onLoad: () => this.onLoad(),\n                selectAccount: this.selectAccount,\n                token: this.token || null,\n                webhook: this.webhook || null,\n                receivedRedirectUri: this.receivedRedirectUri,\n                isWebview: this.isWebview\n            });\n            this.disabledButton = false;\n            this.plaidLinkHandler = handler;\n        });\n    }\n    onExit(error, metadata) {\n        this.Exit.emit({ error, metadata });\n    }\n    onEvent(eventName, metadata) {\n        this.Event.emit({ eventName, metadata });\n    }\n    onSuccess(token, metadata) {\n        this.Success.emit({ token, metadata });\n    }\n    onClick($event) {\n        this.Click.emit($event);\n        // Open to a specific institution if necessary;\n        const institution = this.institution || null;\n        if (this.plaidLinkHandler) {\n            this.plaidLinkHandler.open(institution);\n        }\n    }\n    onLoad($event = \"link_loaded\") {\n        this.Load.emit($event);\n    }\n}\nNgxPlaidLinkDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NgxPlaidLinkDirective, deps: [{ token: NgxPlaidLinkService }], target: i0.ɵɵFactoryTarget.Directive });\nNgxPlaidLinkDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.3\", type: NgxPlaidLinkDirective, selector: \"[ngxPlaidLink]\", inputs: { clientName: \"clientName\", publicKey: \"publicKey\", apiVersion: \"apiVersion\", env: \"env\", institution: \"institution\", product: \"product\", selectAccount: \"selectAccount\", token: \"token\", webhook: \"webhook\", countryCodes: \"countryCodes\", receivedRedirectUri: \"receivedRedirectUri\", isWebview: \"isWebview\" }, outputs: { Event: \"Event\", Click: \"Click\", Load: \"Load\", Exit: \"Exit\", Success: \"Success\" }, host: { listeners: { \"click\": \"onClick($event)\" }, properties: { \"disabled\": \"this.disabledButton\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NgxPlaidLinkDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngxPlaidLink]'\n                }]\n        }], ctorParameters: function () { return [{ type: NgxPlaidLinkService }]; }, propDecorators: { Event: [{\n                type: Output\n            }], Click: [{\n                type: Output\n            }], Load: [{\n                type: Output\n            }], Exit: [{\n                type: Output\n            }], Success: [{\n                type: Output\n            }], clientName: [{\n                type: Input\n            }], disabledButton: [{\n                type: HostBinding,\n                args: ['disabled']\n            }], publicKey: [{\n                type: Input\n            }], apiVersion: [{\n                type: Input\n            }], env: [{\n                type: Input\n            }], institution: [{\n                type: Input\n            }], product: [{\n                type: Input\n            }], selectAccount: [{\n                type: Input\n            }], token: [{\n                type: Input\n            }], webhook: [{\n                type: Input\n            }], countryCodes: [{\n                type: Input\n            }], receivedRedirectUri: [{\n                type: Input\n            }], isWebview: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }] } });\n\nfunction getWindow() {\n    return window;\n}\nclass NgxPlaidLinkButtonComponent {\n    constructor() {\n        this.Event = new EventEmitter();\n        this.Success = new EventEmitter();\n        this.Click = new EventEmitter();\n        this.Load = new EventEmitter();\n        this.Exit = new EventEmitter();\n        this.defaultProps = {\n            apiVersion: \"v2\",\n            env: \"sandbox\",\n            institution: null,\n            selectAccount: false,\n            token: null,\n            publicKey: null,\n            webhook: \"\",\n            product: [\"auth\"],\n            countryCodes: [\"US\"],\n            style: {\n                \"background-color\": \"#0085e4\",\n                \"transition-duration\": \"350ms\",\n                \"transition-property\": \"background-color, box-shadow\",\n                \"transition-timing-function\": \"ease-in-out\",\n                \"-webkit-appearance\": \"button\",\n                border: \"0\",\n                \"border-radius\": \"4px\",\n                \"box-shadow\": \"0 2px 4px 0 rgba(0,0,0,0.1), inset 0 1px 0 0 rgba(255,255,255,0.1)\",\n                color: \"#fff\",\n                \"font-size\": \"20px\",\n                height: \"56px\",\n                outline: \"0\",\n                \"text-align\": \"center\",\n                \"text-transform\": \"none\",\n                padding: \"0 2em\",\n                cursor: \"pointer\"\n            },\n            buttonText: \"Log In To Your Bank Account\",\n            className: \"plaid-link-button\",\n            receivedRedirectUri: null,\n            isWebview: false\n        };\n        this.publicKey = this.defaultProps.publicKey;\n        this.apiVersion = this.defaultProps.apiVersion;\n        this.env = this.defaultProps.env;\n        this.institution = this.defaultProps.institution;\n        this.product = this.defaultProps.product;\n        this.selectAccount = this.defaultProps.selectAccount;\n        this.token = this.defaultProps.token;\n        this.webhook = this.defaultProps.webhook;\n        this.countryCodes = this.defaultProps.countryCodes;\n        this.style = this.defaultProps.style;\n        this.buttonText = this.defaultProps.buttonText;\n        this.className = this.defaultProps.className;\n        this.receivedRedirectUri = this.defaultProps.receivedRedirectUri;\n        this.isWebview = this.defaultProps.isWebview;\n    }\n    get nativeWindow() {\n        return getWindow();\n    }\n    onScriptError() {\n        console.error(\"There was an issue loading the link-initialize.js script\");\n    }\n    onDirectiveSuccess(event) {\n        this.Success.emit(event);\n    }\n    onDirectiveExit(event) {\n        this.Exit.emit(event);\n    }\n    onDirectiveLoad(event) {\n        this.Load.emit(event);\n    }\n    onDirectiveEvent(event) {\n        this.Event.emit(event);\n    }\n    onDirectiveClick(event) {\n        this.Click.emit(event);\n    }\n}\nNgxPlaidLinkButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NgxPlaidLinkButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nNgxPlaidLinkButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.3\", type: NgxPlaidLinkButtonComponent, selector: \"mr-ngx-plaid-link-button\", inputs: { clientName: \"clientName\", publicKey: \"publicKey\", apiVersion: \"apiVersion\", env: \"env\", institution: \"institution\", product: \"product\", selectAccount: \"selectAccount\", token: \"token\", webhook: \"webhook\", countryCodes: \"countryCodes\", style: \"style\", buttonText: \"buttonText\", className: \"className\", receivedRedirectUri: \"receivedRedirectUri\", isWebview: \"isWebview\" }, outputs: { Event: \"Event\", Success: \"Success\", Click: \"Click\", Load: \"Load\", Exit: \"Exit\" }, ngImport: i0, template: `\n    <button ngxPlaidLink\n            [class]=\"className\"\n            [ngStyle]=\"style\"\n            [publicKey]=\"publicKey\"\n            [clientName]=\"clientName\"\n            [apiVersion]=\"apiVersion\"\n            [env]=\"env\"\n            [institution]=\"institution\"\n            [product]=\"product\"\n            [selectAccount]=\"selectAccount\"\n            [token]=\"token\"\n            [webhook]=\"webhook\"\n            [receivedRedirectUri]=\"receivedRedirectUri\"\n            [countryCodes]=\"countryCodes\"\n            (Success)=\"onDirectiveSuccess($event)\"\n            (Exit)=\"onDirectiveExit($event)\"\n            (Load)=\"onDirectiveLoad($event)\"\n            (Event)=\"onDirectiveEvent($event)\"\n            (Click)=\"onDirectiveClick($event)\"\n    >\n      {{ buttonText }}\n    </button>\n  `, isInline: true, directives: [{ type: NgxPlaidLinkDirective, selector: \"[ngxPlaidLink]\", inputs: [\"clientName\", \"publicKey\", \"apiVersion\", \"env\", \"institution\", \"product\", \"selectAccount\", \"token\", \"webhook\", \"countryCodes\", \"receivedRedirectUri\", \"isWebview\"], outputs: [\"Event\", \"Click\", \"Load\", \"Exit\", \"Success\"] }, { type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NgxPlaidLinkButtonComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"mr-ngx-plaid-link-button\",\n                    template: `\n    <button ngxPlaidLink\n            [class]=\"className\"\n            [ngStyle]=\"style\"\n            [publicKey]=\"publicKey\"\n            [clientName]=\"clientName\"\n            [apiVersion]=\"apiVersion\"\n            [env]=\"env\"\n            [institution]=\"institution\"\n            [product]=\"product\"\n            [selectAccount]=\"selectAccount\"\n            [token]=\"token\"\n            [webhook]=\"webhook\"\n            [receivedRedirectUri]=\"receivedRedirectUri\"\n            [countryCodes]=\"countryCodes\"\n            (Success)=\"onDirectiveSuccess($event)\"\n            (Exit)=\"onDirectiveExit($event)\"\n            (Load)=\"onDirectiveLoad($event)\"\n            (Event)=\"onDirectiveEvent($event)\"\n            (Click)=\"onDirectiveClick($event)\"\n    >\n      {{ buttonText }}\n    </button>\n  `,\n                    styles: []\n                }]\n        }], ctorParameters: function () { return []; }, propDecorators: { clientName: [{\n                type: Input\n            }], Event: [{\n                type: Output\n            }], Success: [{\n                type: Output\n            }], Click: [{\n                type: Output\n            }], Load: [{\n                type: Output\n            }], Exit: [{\n                type: Output\n            }], publicKey: [{\n                type: Input\n            }], apiVersion: [{\n                type: Input\n            }], env: [{\n                type: Input\n            }], institution: [{\n                type: Input\n            }], product: [{\n                type: Input\n            }], selectAccount: [{\n                type: Input\n            }], token: [{\n                type: Input\n            }], webhook: [{\n                type: Input\n            }], countryCodes: [{\n                type: Input\n            }], style: [{\n                type: Input\n            }], buttonText: [{\n                type: Input\n            }], className: [{\n                type: Input\n            }], receivedRedirectUri: [{\n                type: Input\n            }], isWebview: [{\n                type: Input\n            }] } });\n\nclass NgxPlaidLinkModule {\n}\nNgxPlaidLinkModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NgxPlaidLinkModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxPlaidLinkModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NgxPlaidLinkModule, declarations: [NgxPlaidLinkButtonComponent, NgxPlaidLinkDirective], imports: [CommonModule], exports: [NgxPlaidLinkButtonComponent, NgxPlaidLinkDirective] });\nNgxPlaidLinkModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NgxPlaidLinkModule, providers: [\n        NgxPlaidLinkService\n    ], imports: [[\n            CommonModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NgxPlaidLinkModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule\n                    ],\n                    providers: [\n                        NgxPlaidLinkService\n                    ],\n                    declarations: [NgxPlaidLinkButtonComponent, NgxPlaidLinkDirective],\n                    exports: [NgxPlaidLinkButtonComponent, NgxPlaidLinkDirective]\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-plaid-link\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxPlaidLinkButtonComponent, NgxPlaidLinkDirective, NgxPlaidLinkModule, NgxPlaidLinkService, PlaidLinkHandler };\n"]},"metadata":{},"sourceType":"module"}