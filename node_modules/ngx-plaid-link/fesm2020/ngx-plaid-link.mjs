import * as i0 from '@angular/core';
import { Injectable, EventEmitter, Directive, Output, Input, HostBinding, HostListener, Component, NgModule } from '@angular/core';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';

class PlaidLinkHandler {
    /**
     * Constructor configures the Plaid Link handler with given config options.
     * @param PlaidConfig config
     */
    constructor(config) {
        this.plaidLink = Plaid.create(config);
    }
    /**
     * Open the Plaid Link window for this handler.
     * @param string institution The name of the institution to open
     */
    open(institution) {
        this.plaidLink.open(institution);
    }
    /**
     * Closes the currently open Plaid Link window if any.
     */
    exit() {
        this.plaidLink.exit();
    }
}

class NgxPlaidLinkService {
    constructor() { }
    /**
     * Create a Plaid Link instance as soon as Plaid Link has loaded.
     * @param PlaidConfig config
     * @returns Promise<PlaidLinkHandler>
     */
    createPlaid(config) {
        return this.loadPlaid().then(() => {
            return new PlaidLinkHandler(config);
        });
    }
    /**
     * Load or wait for the Plaid Link library to load.
     * @returns Promise<void>
     */
    loadPlaid() {
        if (!this.loaded) {
            this.loaded = new Promise((resolve, reject) => {
                const script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = 'https://cdn.plaid.com/link/v2/stable/link-initialize.js';
                script.onerror = (e) => reject(e);
                if (script.readyState) {
                    script.onreadystatechange = () => {
                        if (script.readyState === 'loaded' || script.readyState === 'complete') {
                            script.onreadystatechange = null;
                            resolve();
                        }
                    };
                }
                else {
                    script.onload = () => {
                        resolve();
                    };
                }
                document.getElementsByTagName('body')[0].appendChild(script);
            });
        }
        return this.loaded;
    }
}
NgxPlaidLinkService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxPlaidLinkService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NgxPlaidLinkService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxPlaidLinkService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxPlaidLinkService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });

function getWindow$1() {
    return window;
}
class NgxPlaidLinkDirective {
    constructor(plaidLinkLoader) {
        this.plaidLinkLoader = plaidLinkLoader;
        this.Event = new EventEmitter();
        this.Click = new EventEmitter();
        this.Load = new EventEmitter();
        this.Exit = new EventEmitter();
        this.Success = new EventEmitter();
        this.defaultProps = {
            apiVersion: "v2",
            env: "sandbox",
            institution: null,
            selectAccount: false,
            publicKey: null,
            token: null,
            webhook: "",
            product: ["auth"],
            countryCodes: ["US"],
            receivedRedirectUri: null,
            isWebview: false,
        };
        this.publicKey = this.defaultProps.publicKey;
        this.apiVersion = this.defaultProps.apiVersion;
        this.env = this.defaultProps.env;
        this.institution = this.defaultProps.institution;
        this.product = this.defaultProps.product;
        this.selectAccount = this.defaultProps.selectAccount;
        this.token = this.defaultProps.token;
        this.webhook = this.defaultProps.webhook;
        this.countryCodes = this.defaultProps.countryCodes;
        this.receivedRedirectUri = this.defaultProps.receivedRedirectUri;
        this.isWebview = this.defaultProps.isWebview;
        this.disabledButton = true;
    }
    async ngOnInit() {
        let handler = await this.plaidLinkLoader
            .createPlaid({
            env: this.env,
            key: this.publicKey,
            product: this.product,
            apiVersion: "v2",
            clientName: this.clientName,
            countryCodes: this.countryCodes,
            onSuccess: (public_token, metadata) => this.onSuccess(public_token, metadata),
            onExit: (err, metadata) => this.onExit(err, metadata),
            onEvent: (eventName, metadata) => this.onEvent(eventName, metadata),
            onLoad: () => this.onLoad(),
            selectAccount: this.selectAccount,
            token: this.token || null,
            webhook: this.webhook || null,
            receivedRedirectUri: this.receivedRedirectUri,
            isWebview: this.isWebview
        });
        this.disabledButton = false;
        this.plaidLinkHandler = handler;
    }
    onExit(error, metadata) {
        this.Exit.emit({ error, metadata });
    }
    onEvent(eventName, metadata) {
        this.Event.emit({ eventName, metadata });
    }
    onSuccess(token, metadata) {
        this.Success.emit({ token, metadata });
    }
    onClick($event) {
        this.Click.emit($event);
        // Open to a specific institution if necessary;
        const institution = this.institution || null;
        if (this.plaidLinkHandler) {
            this.plaidLinkHandler.open(institution);
        }
    }
    onLoad($event = "link_loaded") {
        this.Load.emit($event);
    }
}
NgxPlaidLinkDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxPlaidLinkDirective, deps: [{ token: NgxPlaidLinkService }], target: i0.ɵɵFactoryTarget.Directive });
NgxPlaidLinkDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: NgxPlaidLinkDirective, selector: "[ngxPlaidLink]", inputs: { clientName: "clientName", publicKey: "publicKey", apiVersion: "apiVersion", env: "env", institution: "institution", product: "product", selectAccount: "selectAccount", token: "token", webhook: "webhook", countryCodes: "countryCodes", receivedRedirectUri: "receivedRedirectUri", isWebview: "isWebview" }, outputs: { Event: "Event", Click: "Click", Load: "Load", Exit: "Exit", Success: "Success" }, host: { listeners: { "click": "onClick($event)" }, properties: { "disabled": "this.disabledButton" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxPlaidLinkDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngxPlaidLink]'
                }]
        }], ctorParameters: function () { return [{ type: NgxPlaidLinkService }]; }, propDecorators: { Event: [{
                type: Output
            }], Click: [{
                type: Output
            }], Load: [{
                type: Output
            }], Exit: [{
                type: Output
            }], Success: [{
                type: Output
            }], clientName: [{
                type: Input
            }], disabledButton: [{
                type: HostBinding,
                args: ['disabled']
            }], publicKey: [{
                type: Input
            }], apiVersion: [{
                type: Input
            }], env: [{
                type: Input
            }], institution: [{
                type: Input
            }], product: [{
                type: Input
            }], selectAccount: [{
                type: Input
            }], token: [{
                type: Input
            }], webhook: [{
                type: Input
            }], countryCodes: [{
                type: Input
            }], receivedRedirectUri: [{
                type: Input
            }], isWebview: [{
                type: Input
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });

function getWindow() {
    return window;
}
class NgxPlaidLinkButtonComponent {
    constructor() {
        this.Event = new EventEmitter();
        this.Success = new EventEmitter();
        this.Click = new EventEmitter();
        this.Load = new EventEmitter();
        this.Exit = new EventEmitter();
        this.defaultProps = {
            apiVersion: "v2",
            env: "sandbox",
            institution: null,
            selectAccount: false,
            token: null,
            publicKey: null,
            webhook: "",
            product: ["auth"],
            countryCodes: ["US"],
            style: {
                "background-color": "#0085e4",
                "transition-duration": "350ms",
                "transition-property": "background-color, box-shadow",
                "transition-timing-function": "ease-in-out",
                "-webkit-appearance": "button",
                border: "0",
                "border-radius": "4px",
                "box-shadow": "0 2px 4px 0 rgba(0,0,0,0.1), inset 0 1px 0 0 rgba(255,255,255,0.1)",
                color: "#fff",
                "font-size": "20px",
                height: "56px",
                outline: "0",
                "text-align": "center",
                "text-transform": "none",
                padding: "0 2em",
                cursor: "pointer"
            },
            buttonText: "Log In To Your Bank Account",
            className: "plaid-link-button",
            receivedRedirectUri: null,
            isWebview: false
        };
        this.publicKey = this.defaultProps.publicKey;
        this.apiVersion = this.defaultProps.apiVersion;
        this.env = this.defaultProps.env;
        this.institution = this.defaultProps.institution;
        this.product = this.defaultProps.product;
        this.selectAccount = this.defaultProps.selectAccount;
        this.token = this.defaultProps.token;
        this.webhook = this.defaultProps.webhook;
        this.countryCodes = this.defaultProps.countryCodes;
        this.style = this.defaultProps.style;
        this.buttonText = this.defaultProps.buttonText;
        this.className = this.defaultProps.className;
        this.receivedRedirectUri = this.defaultProps.receivedRedirectUri;
        this.isWebview = this.defaultProps.isWebview;
    }
    get nativeWindow() {
        return getWindow();
    }
    onScriptError() {
        console.error("There was an issue loading the link-initialize.js script");
    }
    onDirectiveSuccess(event) {
        this.Success.emit(event);
    }
    onDirectiveExit(event) {
        this.Exit.emit(event);
    }
    onDirectiveLoad(event) {
        this.Load.emit(event);
    }
    onDirectiveEvent(event) {
        this.Event.emit(event);
    }
    onDirectiveClick(event) {
        this.Click.emit(event);
    }
}
NgxPlaidLinkButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxPlaidLinkButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NgxPlaidLinkButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: NgxPlaidLinkButtonComponent, selector: "mr-ngx-plaid-link-button", inputs: { clientName: "clientName", publicKey: "publicKey", apiVersion: "apiVersion", env: "env", institution: "institution", product: "product", selectAccount: "selectAccount", token: "token", webhook: "webhook", countryCodes: "countryCodes", style: "style", buttonText: "buttonText", className: "className", receivedRedirectUri: "receivedRedirectUri", isWebview: "isWebview" }, outputs: { Event: "Event", Success: "Success", Click: "Click", Load: "Load", Exit: "Exit" }, ngImport: i0, template: `
    <button ngxPlaidLink
            [class]="className"
            [ngStyle]="style"
            [publicKey]="publicKey"
            [clientName]="clientName"
            [apiVersion]="apiVersion"
            [env]="env"
            [institution]="institution"
            [product]="product"
            [selectAccount]="selectAccount"
            [token]="token"
            [webhook]="webhook"
            [receivedRedirectUri]="receivedRedirectUri"
            [countryCodes]="countryCodes"
            (Success)="onDirectiveSuccess($event)"
            (Exit)="onDirectiveExit($event)"
            (Load)="onDirectiveLoad($event)"
            (Event)="onDirectiveEvent($event)"
            (Click)="onDirectiveClick($event)"
    >
      {{ buttonText }}
    </button>
  `, isInline: true, directives: [{ type: NgxPlaidLinkDirective, selector: "[ngxPlaidLink]", inputs: ["clientName", "publicKey", "apiVersion", "env", "institution", "product", "selectAccount", "token", "webhook", "countryCodes", "receivedRedirectUri", "isWebview"], outputs: ["Event", "Click", "Load", "Exit", "Success"] }, { type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxPlaidLinkButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "mr-ngx-plaid-link-button",
                    template: `
    <button ngxPlaidLink
            [class]="className"
            [ngStyle]="style"
            [publicKey]="publicKey"
            [clientName]="clientName"
            [apiVersion]="apiVersion"
            [env]="env"
            [institution]="institution"
            [product]="product"
            [selectAccount]="selectAccount"
            [token]="token"
            [webhook]="webhook"
            [receivedRedirectUri]="receivedRedirectUri"
            [countryCodes]="countryCodes"
            (Success)="onDirectiveSuccess($event)"
            (Exit)="onDirectiveExit($event)"
            (Load)="onDirectiveLoad($event)"
            (Event)="onDirectiveEvent($event)"
            (Click)="onDirectiveClick($event)"
    >
      {{ buttonText }}
    </button>
  `,
                    styles: []
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { clientName: [{
                type: Input
            }], Event: [{
                type: Output
            }], Success: [{
                type: Output
            }], Click: [{
                type: Output
            }], Load: [{
                type: Output
            }], Exit: [{
                type: Output
            }], publicKey: [{
                type: Input
            }], apiVersion: [{
                type: Input
            }], env: [{
                type: Input
            }], institution: [{
                type: Input
            }], product: [{
                type: Input
            }], selectAccount: [{
                type: Input
            }], token: [{
                type: Input
            }], webhook: [{
                type: Input
            }], countryCodes: [{
                type: Input
            }], style: [{
                type: Input
            }], buttonText: [{
                type: Input
            }], className: [{
                type: Input
            }], receivedRedirectUri: [{
                type: Input
            }], isWebview: [{
                type: Input
            }] } });

class NgxPlaidLinkModule {
}
NgxPlaidLinkModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxPlaidLinkModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgxPlaidLinkModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxPlaidLinkModule, declarations: [NgxPlaidLinkButtonComponent, NgxPlaidLinkDirective], imports: [CommonModule], exports: [NgxPlaidLinkButtonComponent, NgxPlaidLinkDirective] });
NgxPlaidLinkModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxPlaidLinkModule, providers: [
        NgxPlaidLinkService
    ], imports: [[
            CommonModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxPlaidLinkModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule
                    ],
                    providers: [
                        NgxPlaidLinkService
                    ],
                    declarations: [NgxPlaidLinkButtonComponent, NgxPlaidLinkDirective],
                    exports: [NgxPlaidLinkButtonComponent, NgxPlaidLinkDirective]
                }]
        }] });

/*
 * Public API Surface of ngx-plaid-link
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxPlaidLinkButtonComponent, NgxPlaidLinkDirective, NgxPlaidLinkModule, NgxPlaidLinkService, PlaidLinkHandler };
//# sourceMappingURL=ngx-plaid-link.mjs.map
