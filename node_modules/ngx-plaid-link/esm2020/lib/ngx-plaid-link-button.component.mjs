import { Component, EventEmitter, Input, Output } from "@angular/core";
import * as i0 from "@angular/core";
import * as i1 from "./ngx-plaid-link.directive";
import * as i2 from "@angular/common";
function getWindow() {
    return window;
}
export class NgxPlaidLinkButtonComponent {
    constructor() {
        this.Event = new EventEmitter();
        this.Success = new EventEmitter();
        this.Click = new EventEmitter();
        this.Load = new EventEmitter();
        this.Exit = new EventEmitter();
        this.defaultProps = {
            apiVersion: "v2",
            env: "sandbox",
            institution: null,
            selectAccount: false,
            token: null,
            publicKey: null,
            webhook: "",
            product: ["auth"],
            countryCodes: ["US"],
            style: {
                "background-color": "#0085e4",
                "transition-duration": "350ms",
                "transition-property": "background-color, box-shadow",
                "transition-timing-function": "ease-in-out",
                "-webkit-appearance": "button",
                border: "0",
                "border-radius": "4px",
                "box-shadow": "0 2px 4px 0 rgba(0,0,0,0.1), inset 0 1px 0 0 rgba(255,255,255,0.1)",
                color: "#fff",
                "font-size": "20px",
                height: "56px",
                outline: "0",
                "text-align": "center",
                "text-transform": "none",
                padding: "0 2em",
                cursor: "pointer"
            },
            buttonText: "Log In To Your Bank Account",
            className: "plaid-link-button",
            receivedRedirectUri: null,
            isWebview: false
        };
        this.publicKey = this.defaultProps.publicKey;
        this.apiVersion = this.defaultProps.apiVersion;
        this.env = this.defaultProps.env;
        this.institution = this.defaultProps.institution;
        this.product = this.defaultProps.product;
        this.selectAccount = this.defaultProps.selectAccount;
        this.token = this.defaultProps.token;
        this.webhook = this.defaultProps.webhook;
        this.countryCodes = this.defaultProps.countryCodes;
        this.style = this.defaultProps.style;
        this.buttonText = this.defaultProps.buttonText;
        this.className = this.defaultProps.className;
        this.receivedRedirectUri = this.defaultProps.receivedRedirectUri;
        this.isWebview = this.defaultProps.isWebview;
    }
    get nativeWindow() {
        return getWindow();
    }
    onScriptError() {
        console.error("There was an issue loading the link-initialize.js script");
    }
    onDirectiveSuccess(event) {
        this.Success.emit(event);
    }
    onDirectiveExit(event) {
        this.Exit.emit(event);
    }
    onDirectiveLoad(event) {
        this.Load.emit(event);
    }
    onDirectiveEvent(event) {
        this.Event.emit(event);
    }
    onDirectiveClick(event) {
        this.Click.emit(event);
    }
}
NgxPlaidLinkButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxPlaidLinkButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NgxPlaidLinkButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: NgxPlaidLinkButtonComponent, selector: "mr-ngx-plaid-link-button", inputs: { clientName: "clientName", publicKey: "publicKey", apiVersion: "apiVersion", env: "env", institution: "institution", product: "product", selectAccount: "selectAccount", token: "token", webhook: "webhook", countryCodes: "countryCodes", style: "style", buttonText: "buttonText", className: "className", receivedRedirectUri: "receivedRedirectUri", isWebview: "isWebview" }, outputs: { Event: "Event", Success: "Success", Click: "Click", Load: "Load", Exit: "Exit" }, ngImport: i0, template: `
    <button ngxPlaidLink
            [class]="className"
            [ngStyle]="style"
            [publicKey]="publicKey"
            [clientName]="clientName"
            [apiVersion]="apiVersion"
            [env]="env"
            [institution]="institution"
            [product]="product"
            [selectAccount]="selectAccount"
            [token]="token"
            [webhook]="webhook"
            [receivedRedirectUri]="receivedRedirectUri"
            [countryCodes]="countryCodes"
            (Success)="onDirectiveSuccess($event)"
            (Exit)="onDirectiveExit($event)"
            (Load)="onDirectiveLoad($event)"
            (Event)="onDirectiveEvent($event)"
            (Click)="onDirectiveClick($event)"
    >
      {{ buttonText }}
    </button>
  `, isInline: true, directives: [{ type: i1.NgxPlaidLinkDirective, selector: "[ngxPlaidLink]", inputs: ["clientName", "publicKey", "apiVersion", "env", "institution", "product", "selectAccount", "token", "webhook", "countryCodes", "receivedRedirectUri", "isWebview"], outputs: ["Event", "Click", "Load", "Exit", "Success"] }, { type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxPlaidLinkButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "mr-ngx-plaid-link-button",
                    template: `
    <button ngxPlaidLink
            [class]="className"
            [ngStyle]="style"
            [publicKey]="publicKey"
            [clientName]="clientName"
            [apiVersion]="apiVersion"
            [env]="env"
            [institution]="institution"
            [product]="product"
            [selectAccount]="selectAccount"
            [token]="token"
            [webhook]="webhook"
            [receivedRedirectUri]="receivedRedirectUri"
            [countryCodes]="countryCodes"
            (Success)="onDirectiveSuccess($event)"
            (Exit)="onDirectiveExit($event)"
            (Load)="onDirectiveLoad($event)"
            (Event)="onDirectiveEvent($event)"
            (Click)="onDirectiveClick($event)"
    >
      {{ buttonText }}
    </button>
  `,
                    styles: []
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { clientName: [{
                type: Input
            }], Event: [{
                type: Output
            }], Success: [{
                type: Output
            }], Click: [{
                type: Output
            }], Load: [{
                type: Output
            }], Exit: [{
                type: Output
            }], publicKey: [{
                type: Input
            }], apiVersion: [{
                type: Input
            }], env: [{
                type: Input
            }], institution: [{
                type: Input
            }], product: [{
                type: Input
            }], selectAccount: [{
                type: Input
            }], token: [{
                type: Input
            }], webhook: [{
                type: Input
            }], countryCodes: [{
                type: Input
            }], style: [{
                type: Input
            }], buttonText: [{
                type: Input
            }], className: [{
                type: Input
            }], receivedRedirectUri: [{
                type: Input
            }], isWebview: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,