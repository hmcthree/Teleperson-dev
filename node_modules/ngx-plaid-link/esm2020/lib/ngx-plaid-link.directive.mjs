import { Directive, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-plaid-link.service";
function getWindow() {
    return window;
}
export class NgxPlaidLinkDirective {
    constructor(plaidLinkLoader) {
        this.plaidLinkLoader = plaidLinkLoader;
        this.Event = new EventEmitter();
        this.Click = new EventEmitter();
        this.Load = new EventEmitter();
        this.Exit = new EventEmitter();
        this.Success = new EventEmitter();
        this.defaultProps = {
            apiVersion: "v2",
            env: "sandbox",
            institution: null,
            selectAccount: false,
            publicKey: null,
            token: null,
            webhook: "",
            product: ["auth"],
            countryCodes: ["US"],
            receivedRedirectUri: null,
            isWebview: false,
        };
        this.publicKey = this.defaultProps.publicKey;
        this.apiVersion = this.defaultProps.apiVersion;
        this.env = this.defaultProps.env;
        this.institution = this.defaultProps.institution;
        this.product = this.defaultProps.product;
        this.selectAccount = this.defaultProps.selectAccount;
        this.token = this.defaultProps.token;
        this.webhook = this.defaultProps.webhook;
        this.countryCodes = this.defaultProps.countryCodes;
        this.receivedRedirectUri = this.defaultProps.receivedRedirectUri;
        this.isWebview = this.defaultProps.isWebview;
        this.disabledButton = true;
    }
    async ngOnInit() {
        let handler = await this.plaidLinkLoader
            .createPlaid({
            env: this.env,
            key: this.publicKey,
            product: this.product,
            apiVersion: "v2",
            clientName: this.clientName,
            countryCodes: this.countryCodes,
            onSuccess: (public_token, metadata) => this.onSuccess(public_token, metadata),
            onExit: (err, metadata) => this.onExit(err, metadata),
            onEvent: (eventName, metadata) => this.onEvent(eventName, metadata),
            onLoad: () => this.onLoad(),
            selectAccount: this.selectAccount,
            token: this.token || null,
            webhook: this.webhook || null,
            receivedRedirectUri: this.receivedRedirectUri,
            isWebview: this.isWebview
        });
        this.disabledButton = false;
        this.plaidLinkHandler = handler;
    }
    onExit(error, metadata) {
        this.Exit.emit({ error, metadata });
    }
    onEvent(eventName, metadata) {
        this.Event.emit({ eventName, metadata });
    }
    onSuccess(token, metadata) {
        this.Success.emit({ token, metadata });
    }
    onClick($event) {
        this.Click.emit($event);
        // Open to a specific institution if necessary;
        const institution = this.institution || null;
        if (this.plaidLinkHandler) {
            this.plaidLinkHandler.open(institution);
        }
    }
    onLoad($event = "link_loaded") {
        this.Load.emit($event);
    }
}
NgxPlaidLinkDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxPlaidLinkDirective, deps: [{ token: i1.NgxPlaidLinkService }], target: i0.ɵɵFactoryTarget.Directive });
NgxPlaidLinkDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: NgxPlaidLinkDirective, selector: "[ngxPlaidLink]", inputs: { clientName: "clientName", publicKey: "publicKey", apiVersion: "apiVersion", env: "env", institution: "institution", product: "product", selectAccount: "selectAccount", token: "token", webhook: "webhook", countryCodes: "countryCodes", receivedRedirectUri: "receivedRedirectUri", isWebview: "isWebview" }, outputs: { Event: "Event", Click: "Click", Load: "Load", Exit: "Exit", Success: "Success" }, host: { listeners: { "click": "onClick($event)" }, properties: { "disabled": "this.disabledButton" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxPlaidLinkDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngxPlaidLink]'
                }]
        }], ctorParameters: function () { return [{ type: i1.NgxPlaidLinkService }]; }, propDecorators: { Event: [{
                type: Output
            }], Click: [{
                type: Output
            }], Load: [{
                type: Output
            }], Exit: [{
                type: Output
            }], Success: [{
                type: Output
            }], clientName: [{
                type: Input
            }], disabledButton: [{
                type: HostBinding,
                args: ['disabled']
            }], publicKey: [{
                type: Input
            }], apiVersion: [{
                type: Input
            }], env: [{
                type: Input
            }], institution: [{
                type: Input
            }], product: [{
                type: Input
            }], selectAccount: [{
                type: Input
            }], token: [{
                type: Input
            }], webhook: [{
                type: Input
            }], countryCodes: [{
                type: Input
            }], receivedRedirectUri: [{
                type: Input
            }], isWebview: [{
                type: Input
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,